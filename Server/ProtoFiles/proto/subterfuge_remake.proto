syntax = "proto3";

option java_multiple_files = true;
option java_package = "subterfugeRemake.grpc.service";
option java_outer_classname = "SubterfugeRemakeProto";
option objc_class_prefix = "SRP";

package SubterfugeRemakeService;

service subterfugeService {
    // Allows users to login
    rpc Login(AuthorizationRequest) returns (AuthorizationResponse) {}
    
    rpc LoginWithToken(AuthorizedTokenRequest) returns (AuthorizationResponse) {}
    
    // Allows users to register a new account
    rpc RegisterAccount(AccountRegistrationRequest) returns (AccountRegistrationResponse) {}
    
    rpc GetRoles(GetRolesRequest) returns (GetRolesResponse) {}
    
    rpc GetOpenLobbies(OpenLobbiesRequest) returns (OpenLobbiesResponse) {}
    
    rpc GetPlayerCurrentGames(PlayerCurrentGamesRequest) returns (PlayerCurrentGamesResponse) {}
    
    rpc CreateNewRoom(CreateRoomRequest) returns (CreateRoomResponse) {}
    
    rpc JoinRoom(JoinRoomRequest) returns (JoinRoomResponse) {}

    rpc LeaveRoom(LeaveRoomRequest) returns (LeaveRoomResponse) {}
    
    rpc StartGameEarly (StartGameEarlyRequest) returns (StartGameEarlyResponse) {}
    
    rpc GetGameRoomEvents(GetGameRoomEventsRequest) returns (GetGameRoomEventsResponse) {}
    
    rpc SubmitGameEvent(SubmitGameEventRequest) returns (SubmitGameEventResponse) {}
    
    rpc UpdateGameEvent(UpdateGameEventRequest) returns (SubmitGameEventResponse) {}
    
    rpc DeleteGameEvent(DeleteGameEventRequest) returns (DeleteGameEventResponse) {}
    
    rpc CreateMessageGroup(CreateMessageGroupRequest) returns (CreateMessageGroupResponse) {}
    
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
    
    rpc GetMessageGroups(GetMessageGroupsRequest) returns (GetMessageGroupsResponse) {}

    rpc GetGroupMessages(GetGroupMessagesRequest) returns (GetGroupMessagesResponse) {}
    
    rpc BlockPlayer(BlockPlayerRequest) returns (BlockPlayerResponse) {}

    rpc UnblockPlayer(UnblockPlayerRequest) returns (UnblockPlayerResponse) {}

    rpc ViewBlockedPlayers(ViewBlockedPlayersRequest) returns (ViewBlockedPlayersResponse) {}

    rpc SendFriendRequest(SendFriendRequestRequest) returns (SendFriendRequestResponse) {}

    rpc AcceptFriendRequest(AcceptFriendRequestRequest) returns (AcceptFriendRequestResponse) {}

    rpc DenyFriendRequest(DenyFriendRequestRequest) returns (DenyFriendRequestResponse) {}

    rpc ViewFriendRequests(ViewFriendRequestsRequest) returns (ViewFriendRequestsResponse) {}

    rpc RemoveFriend(RemoveFriendRequest) returns (RemoveFriendResponse) {}

    rpc ViewFriends(ViewFriendsRequest) returns (ViewFriendsResponse) {}
    
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}

    rpc AuthorizedHealthCheck(AuthorizedHealthCheckRequest) returns (AuthorizedHealthCheckResponse) {}
    
    rpc SubmitCustomSpecialist(SubmitCustomSpecialistRequest) returns (SubmitCustomSpecialistResponse) {}

    rpc GetCustomSpecialists(GetCustomSpecialistsRequest) returns (GetCustomSpecialistsResponse) {}

    rpc GetPlayerCustomSpecialists(GetPlayerCustomSpecialistsRequest) returns (GetPlayerCustomSpecialistsResponse) {}

    rpc CreateSpecialistPackage(CreateSpecialistPackageRequest) returns (CreateSpecialistPackageResponse) {}

    rpc GetSpecialistPackages(GetSpecialistPackagesRequest) returns (GetSpecialistPackagesResponse) {}

    rpc GetPlayerSpecialistPackages(GetPlayerSpecialistPackagesRequest) returns (GetPlayerSpecialistPackagesResponse) {}
}

message ResponseStatus {
    bool isSuccess = 2;
    string detail = 3;
}

message AuthorizationRequest {
    string Username = 1;
    string Password = 2;
}

message AuthorizedTokenRequest {
    string Token = 1;
}

message AuthorizationResponse {
    ResponseStatus status = 1;
    User User = 2;
    string Token = 3;
}

message AccountRegistrationRequest {
    string Username = 1;
    string Password = 2;
    string Email = 3;
    string DeviceIdentifier = 4;
}

message AccountRegistrationResponse {
    ResponseStatus status = 1;
    User User = 2;
    string Token = 3;
}

message User {
    string Id = 1;
    string Username = 2;
}

message OpenLobbiesRequest {
    RoomStatus RoomStatus = 1;
    bool FilterByPlayer = 2;
}

enum RoomStatus {
    OPEN = 0;
    ONGOING = 1;
    CLOSED = 2;
    PRIVATE = 3;
}

message OpenLobbiesResponse {
    ResponseStatus status = 1;
    repeated GameConfiguration Rooms = 2;
}

message GameConfiguration {
    string Id = 1;
    RoomStatus RoomStatus = 2;
    User Creator = 3;
    GameSettings GameSettings = 4;
    MapConfiguration MapConfiguration = 5;
    string RoomName = 6;
    int64 UnixTimeCreated = 9;
    int64 UnixTimeStarted = 10;
    repeated User Players = 12;
}

message GameSettings {
    repeated SpecialistConfiguration allowedSpecialists = 1;
    double MinutesPerTick = 2;
    Goal Goal = 3;
    bool IsRanked = 4;
    bool Anonymous = 5;
    int32 MaxPlayers = 6;
}

message MapConfiguration {
    int32 Seed = 1;
    int32 OutpostsPerPlayer = 2;
    int32 MinimumOutpostDistance = 3;
    int32 MaximumOutpostDistance = 4;
    int32 DormantsPerPlayer = 5;
    OutpostWeighting OutpostDistribution = 6;
}

message OutpostWeighting {
    float generatorWeight = 1;
    float factoryWeight = 2;
    float watchtowerWeight = 3;
}

enum Goal {
    MINING = 0;
    DOMINATION = 1;
}

message CreateRoomRequest {
    GameSettings GameSettings = 2;
    MapConfiguration MapConfiguration = 3;
    string RoomName = 6;
    bool isPrivate = 7;
}

message CreateRoomResponse {
    ResponseStatus status = 1;
    GameConfiguration createdRoom = 2;
}

message JoinRoomRequest {
    string RoomId = 1;
}

message JoinRoomResponse {
    ResponseStatus status = 1;
}

message LeaveRoomRequest {
    string RoomId = 1;
}

message LeaveRoomResponse {
    ResponseStatus status = 1;
}

message StartGameEarlyRequest {
    string RoomId = 1;    
}

message StartGameEarlyResponse {
    ResponseStatus status = 1;
}

message GetGameRoomEventsRequest {
    string RoomId = 1;
    int64 AfterTick = 2;
}

message GetGameRoomEventsResponse {
    ResponseStatus status = 1;
    repeated GameEventModel GameEvents = 2;
}

message GameEventRequest {
    EventType eventType = 1;
    int32 OccursAtTick = 3;
    bytes EventData = 5;
}

message SubmitGameEventRequest {
    string RoomId = 1;
    GameEventRequest EventData = 2;
}

message SubmitGameEventResponse {
    ResponseStatus status = 1;
    string EventId = 3;
}

message UpdateGameEventRequest {
    string RoomId = 1;
    string eventId = 2;
    GameEventRequest EventData = 3;
}

message DeleteGameEventRequest {
    string RoomId = 1;
    string EventId = 2;
}

message DeleteGameEventResponse {
    ResponseStatus status = 1;
}

message CreateMessageGroupRequest {
    string RoomId = 1;
    repeated string UserIdsInGroup = 2;
}

message CreateMessageGroupResponse {
    ResponseStatus status = 1;
    string GroupId = 2;
}

message SendMessageRequest {
    string RoomId = 1;
    string GroupId = 2;
    string Message = 3;
}

message SendMessageResponse {
    ResponseStatus status = 1;
}

message GetMessageGroupsRequest {
    string RoomId = 1;    
}

message GetMessageGroupsResponse {
    ResponseStatus status = 1;
    repeated MessageGroup MessageGroups = 2;
}

message MessageGroup {
    string GroupId = 1;
    repeated User GroupMembers = 2;
    repeated MessageModel Messages = 3;
}

message BlockPlayerRequest {
    string UserIdToBlock = 1;
}

message BlockPlayerResponse {
    ResponseStatus status = 1;
}

message UnblockPlayerRequest {
    string UserIdToBlock = 1;
}

message UnblockPlayerResponse {
    ResponseStatus status = 1;
}

message ViewBlockedPlayersRequest {}

message ViewBlockedPlayersResponse {
    ResponseStatus status = 1;
    repeated User BlockedUsers = 2;
}

message SendFriendRequestRequest {
    string FriendId = 1;
}

message SendFriendRequestResponse {
    ResponseStatus status = 1;
}

message AcceptFriendRequestRequest {
    string FriendId = 1;
}

message AcceptFriendRequestResponse {
    ResponseStatus status = 1;
}

message DenyFriendRequestRequest {
    string FriendId = 1;
}

message DenyFriendRequestResponse {
    ResponseStatus status = 1;
}

message ViewFriendRequestsRequest {}

message ViewFriendRequestsResponse {
    ResponseStatus status = 1;
    repeated User IncomingFriends = 2;
}

message RemoveFriendRequest {
    string FriendId = 1;
}

message RemoveFriendResponse {
    ResponseStatus status = 1;
}

message ViewFriendsRequest { }

message ViewFriendsResponse {
    ResponseStatus status = 1;
    repeated User Friends = 2;
}

message HealthCheckRequest { }
message HealthCheckResponse {
    ResponseStatus status = 1;
}
message AuthorizedHealthCheckRequest { }
message AuthorizedHealthCheckResponse {
    ResponseStatus status = 1;
}

message PlayerCurrentGamesRequest{}
message PlayerCurrentGamesResponse{
    ResponseStatus status = 1;
    repeated GameConfiguration games = 2;
}

message GetGroupMessagesRequest {
    string roomId = 1;
    string groupId = 2;
    int32 pagination = 3;
}

message GetGroupMessagesResponse {
    ResponseStatus status = 1;
    MessageGroup group = 2;
}

message SubmitCustomSpecialistRequest {
    SpecialistConfiguration Configuration = 1;
}
    
message SubmitCustomSpecialistResponse {
    ResponseStatus status = 1;
    string SpecialistConfigurationId = 2;
}

message GetCustomSpecialistsRequest {
    int64 pageNumber = 1;
    string searchTerm = 2;
}

message GetCustomSpecialistsResponse {
    ResponseStatus status = 1;
    repeated SpecialistConfiguration CustomSpecialists = 2;
}

message CreateSpecialistPackageRequest {
    SpecialistPackage SpecialistPackage = 1;
}

message CreateSpecialistPackageResponse {
    ResponseStatus status = 1;
    string SpecialistPackageId = 2;
}

message GetSpecialistPackagesRequest {
    int64 pageNumber = 1;
    string searchTerm = 2;
}

message GetSpecialistPackagesResponse {
    ResponseStatus status = 1;
    repeated SpecialistPackage SpecialistPackages = 2;
}

message GetPlayerCustomSpecialistsRequest {
    string playerId = 1;
}

message GetPlayerCustomSpecialistsResponse {
    ResponseStatus status = 1;
    repeated SpecialistConfiguration PlayerSpecialists = 2;
}

message GetPlayerSpecialistPackagesRequest {
    string playerId = 1;
}

message GetPlayerSpecialistPackagesResponse {
    ResponseStatus status = 1;
    repeated SpecialistPackage PlayerPackages = 2;
}

message GetRolesRequest { }

message GetRolesResponse {
    ResponseStatus status = 1;
    repeated UserClaim claims = 2;
}


// For database and server processing only.
// Players should never be shown or given access to the full data model as it contains confidential information

message FriendModel {
    string Id = 1;
    string playerId = 2;
    string friendId = 3;
    FriendStatus FriendStatus = 4;
    int64 UnixTimeCreated = 5;
}

enum FriendStatus {
    STATUS_NO_RELATION = 0;
    STATUS_PENDING = 1;
    STATUS_FRIENDS = 2;
    STATUS_BLOCKED = 3;
}

message UserModel {
    string Id = 1;
    string Username = 2;
    string PasswordHash = 3;
    string Email = 4;
    string deviceIdentifier = 5;
    bool emailVerified = 6;
    repeated UserClaim claims = 7;
    string pushNotificationIdentifier = 8;
}

enum UserClaim {
    UNKNOWN = 0;
    USER = 1;
    DEV = 2;
    ADMIN = 3;
    EMAIL_VERIFIED = 4;
    BANNED = 5;
}

message GameEventModel {
    string Id = 1;
    int64 UnixTimeIssued = 2;
    int32 OccursAtTick = 3;
    string IssuedBy = 4;
    bytes EventData = 5;
    EventType eventType = 6;
    string roomId = 7;
}

message GroupModel {
    string Id = 1;
    repeated string GroupMembers = 2;
    string roomId = 3;
}

message MessageModel {
    string Id = 1;
    string roomId = 2;
    string groupId = 3;
    int64 UnixTimeCreatedAt = 4;
    string SenderId = 5;
    string Message = 6;
}

enum EventType {
    UNKNOWN_EVENT = 0;
    LAUNCH_EVENT = 1;
    TOGGLE_SHIELD_EVENT = 2;
    DRILL_MINE_EVENT = 3;
}

// Spec config

enum EffectTrigger {
    NoTrigger = 0;
    HireSelf = 1;
    HireOther = 2;
    PromoteSelf = 3;
    PromoteOther = 4;
    LeaveOutpost = 5;
    ArriveOutpost = 6;
    PreCombat = 7;    // Before combat occurs
    CombatLoss = 8;   // Doubles for if this specialist gets captured.
    CombatVictory = 9;
    FactoryProduce = 10;
    MineProduce = 11;
    SubEntersVisionRange = 12;
    LocalTick = 13;  // 'Tick' event is triggered every game tick. To use this, generally an 'interval' should be set.
                     // For example, every 10 ticks.
                     // Only valid if an interval is set.
    Explosion = 14;     // Gets triggered if your sub/outpost is caught in an explosion
    ManualTrigger = 15; // Manually triggered effect.
                        // Using this event requires setting an interval. 
                        // The interval in this case, is the cooldown of the effect.
    CurrencyGain = 16; // Triggers when the player gains currency
    AoeTick = 17;  // Triggers on an interval for subs within the AoeRange.
    SpendCurrency = 18; // Triggers when the player spends any amount of currency
    TargetSub = 19; // If you have left a driller carrier targeting a sub
    PostCombat = 20; // After all combat events have been resolved
    CombatAvoided = 21; // Triggered if a combat is avoided (by invisibility or other)
}

enum EffectTarget {
    NoTarget = 0;
    Friendly = 1;
    Enemy = 2;
    All = 3;
}

enum EffectModifier {
    NoEffect = 0;
    Driller = 1;
    SpecialistCapacity = 2;
    ShieldValue = 3;
    ShieldRegeneration = 4;
    ShieldMaxValue = 5;
    VisionRange = 6;
    Speed = 7;
    KillPlayer = 8;        // Also a stupid modifier... Can be an unavoidable killing machine...
    VictoryPlayer = 9;     // Make player win the game... Kinda a stupid modifier to allow.... Might remove.
    KillSpecialists = 10;
    StealDrillers = 12;
    ReturnToDestination = 13;
    DemoteSpecialists = 14;
    UncaptureSpecialists = 15;
    CaptureSpecialists = 16;
    PromoteSpecialists = 17;
    RedirectEnemiesToSpecialistLocation = 18;
    CannotBeReleased = 19; // On capture, can set this to prevent enemies releasing the specialist.
    CannotBeMoved = 20;    // Prevents the specialist from moving.
    BecomeSpecialistsOwner = 21; // Gain control of specialists 
    TemporarilyBecomeSpecialistOwner = 22; // Only become specialist owner for the event.
    ConvertSpecialistOwners = 23; // Any specialists swap ownership
    AllowMovingCapturedSpecialists = 24;  // Allows captured specialists to be moved with the specialist.
    PreventSpecialistEffects = 26;    // Prevent other specialist effects from applying
    DuplicatePersonalSpecialistEffects = 27;  // Doubles friendly specialist effects
    CanLaunchSubs = 28;
    CanTargetFriendlySubs = 29;
    CanTargetEnemySubs = 30;
    KillThisSpecialist = 31;
    IgnoreDrillerCapacity = 32;
    Invisibility = 33;
    OfferedSpecialists = 34;
    CurrencyValue = 35;
}

message SpecialistConfiguration {
    string Id = 1;
    int32 Priority = 2;
    string SpecialistName = 3;
    User Creator = 4;
    repeated SpecialistEffectConfiguration specialistEffects = 5;
    string PromotesFrom = 6;
    repeated SpecialistClass specialistClasses = 7;
    bool onlyActiveIfCaptured = 8; // Makes it so that the specialist's effects only apply once the specialist is captured.
    int32 numberOnHire = 9;
}

enum AoeTarget {
    NoAoeTargets = 0;
    MostDrillers = 1;
    Closest = 2;
    Fastest = 3;
    AllTargets = 4;
}

message SpecialistEffectConfiguration {
    EffectValue Value = 1;
    EffectTrigger EffectTrigger = 2;
    EffectTarget EffectTarget = 3;
    EffectModifier EffectModifier = 4;
    int64 cooldownTicks = 5;  // Cooldown between when events can occur for the specialist.
    AoeTarget target = 6;     // If an Aoe event is defined, this value sets who it effects.
}

message EffectValue {
    float Value = 1;
    ValueType valueType = 2;
}

enum ValueType {
    NoValue = 0;
    Numeric = 1;
    Percentage = 2;
}

message SpecialistPackage {
    User Creator = 1;
    string PackageName = 2;
    string Id = 3;
    repeated string specialistIds = 4;
    repeated string SpecialistPackageIds = 5;
}

message SpecialistPackageConfiguration {
    repeated SpecialistConfiguration SpecialistConfigurations = 2;
}

enum SpecialistClass {
    Unknown = 0;    // Unknown.
    Warrior = 1;    // Dealing additional damage
    Protector = 2;  // Add shields
    Thief = 3;      // Steal Percentage
    Zoner = 4;      // Increase AoE radius
    Investor = 5;   // Income rate increase
    Controller = 6; // Increase No. of hired units for minion hires
    Producer = 7;   // Factory / Mine production rate
    Influencer = 8; // Increase specialist capacity
    Leecher = 9;    // Decrease Enemy Production Rate
    Zoomer = 10;    // Increase speed
    Piercer = 11;   // Destroy shield
}